# This is a basic workflow to help you get started with Actions

name: Rebase-BF-Patch

# Controls when the workflow will run
on:
  schedule:
    - cron: "0 0 * * *"   # <=== Change this value
    
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  rebase-patch:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: secrets
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Rebase script
        run: |
          set -uex
          set -o pipefail
          echo Script start
          TAGS=$(curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/betaflight/betaflight/releases | jq -r '.[]|.draft=false |.tag_name')
          echo "$TAGS" > .tags
          
          LAST_TAG=4.5.0-RC4
          BRANCH_NAME=msp_delayed_disarm
          TAGS=$(sed "/${LAST_TAG}/q" <.tags | sed \$d)
          
          echo Tags: "$TAGS"
          [ -n "$TAGS" ] || {
            echo "No new releases, exiting!"
            exit 1
          }
          IFS=$'\n' read -d '' -a TAGARRAY <<< "$TAGS" || true
          LASTTAG=${TAGARRAY[0]}
          echo Last tag: "$LASTTAG"
          NEWBRANCH=rebased_$LASTTAG

          mkdir -p work
          cd work
          git config --global user.email "you@example.com"
          git config --global user.name "Your Name"
          git clone -o fork -b "${BRANCH_NAME}" "https://github.com/alteman/betaflight"
          cd betaflight
          git ls-remote --exit-code --heads fork refs/heads/$NEWBRANCH && {
            echo "Branch already exists, exiting!"
            exit 0
          } || true
          COMMIT=$(git rev-list -n 1 "$BRANCH_NAME" --)
          git remote add origin https://github.com/betaflight/betaflight
          git fetch --all --tags 
          git checkout tags/$LASTTAG
          git cherry-pick $COMMIT
          git branch $NEWBRANCH
          git checkout $NEWBRANCH
          set +x
          git remote set-url fork "https://oauth2:$REPO_KEY@github.com/alteman/betaflight"
          set -x
          git push fork $NEWBRANCH
          echo "---" > ../versions.yaml
          echo "patched_versions:" >> ../versions.yaml
          for TAG in "${TAGARRAY[@]}"
          do
            echo "  - tag: $TAG" >> ../versions.yaml
            COMMIT=$(git rev-list -n 1 "fork/rebased_$TAG" --)
            echo "    commit: $COMMIT" >> ../versions.yaml
          done
          cat ../versions.yaml
          cd .. # back to ..erm.. ./work
          set +x
          git clone "https://oauth2:$REPO_KEY@github.com/alteman/alteman.github.io"
          set -x
          cd alteman.github.io
          cp ../versions.yaml _data/bf.yaml
          git commit  -m "Add BF $LASTTAG" _data/bf.yaml
          git push origin main

        env:
          REPO_KEY: ${{ secrets.REPO_KEY }}
